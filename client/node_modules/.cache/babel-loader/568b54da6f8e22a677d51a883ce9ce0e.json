{"ast":null,"code":"// effects from sagas that let us do different things\n// listens to every action\nimport { takeLatest, call, put } from \"redux-saga/effects\";\nimport { FETCH_COLLECTIONS_START } from \"../types\";\nimport { firestore, convertCollectionsSnapshotToMap } from \"../../Firebase/Firebase.utils\";\nimport { fetchCollectionsSuccess, fetchCollectionsFailure } from \"../actions/shopActions\"; // async code generator fuction\n\nexport function* fetchCollectionsAsync() {\n  try {\n    const collectionRef = firestore.collection(\"collections\"); // instead of promise chains, we use generator function\n\n    const snapshot = yield collectionRef.get();\n    const collectionsMap = yield call(convertCollectionsSnapshotToMap, snapshot);\n    yield put(fetchCollectionsSuccess(collectionsMap));\n  } catch (error) {\n    yield put(fetchCollectionsFailure(error));\n  } // async fetch\n  // collectionRef\n  //   .get()\n  //   .then(snapshot => {\n  //     const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n  //     // dispatch the succcess call\n  //     dispatch(fetchCollectionsSuccess(collectionsMap));\n  //   })\n  //   .catch(error => dispatch(fetchCollectionsFailure(error.message)));\n\n} // saga\n\nexport function* fetchCollectionsStart() {\n  yield takeLatest(FETCH_COLLECTIONS_START, fetchCollectionsAsync);\n}","map":{"version":3,"sources":["/Users/DanielByun/Documents/java/udemy/completeReactDeveloperCourse/clothing-ecommerce-store/src/redux/saga/shop.sagas.js"],"names":["takeLatest","call","put","FETCH_COLLECTIONS_START","firestore","convertCollectionsSnapshotToMap","fetchCollectionsSuccess","fetchCollectionsFailure","fetchCollectionsAsync","collectionRef","collection","snapshot","get","collectionsMap","error","fetchCollectionsStart"],"mappings":"AAAA;AAEA;AACA,SAASA,UAAT,EAAqBC,IAArB,EAA2BC,GAA3B,QAAsC,oBAAtC;AAEA,SAASC,uBAAT,QAAwC,UAAxC;AACA,SACEC,SADF,EAEEC,+BAFF,QAGO,+BAHP;AAIA,SACEC,uBADF,EAEEC,uBAFF,QAGO,wBAHP,C,CAKA;;AACA,OAAO,UAAUC,qBAAV,GAAkC;AACvC,MAAI;AACF,UAAMC,aAAa,GAAGL,SAAS,CAACM,UAAV,CAAqB,aAArB,CAAtB,CADE,CAEF;;AACA,UAAMC,QAAQ,GAAG,MAAMF,aAAa,CAACG,GAAd,EAAvB;AACA,UAAMC,cAAc,GAAG,MAAMZ,IAAI,CAC/BI,+BAD+B,EAE/BM,QAF+B,CAAjC;AAIA,UAAMT,GAAG,CAACI,uBAAuB,CAACO,cAAD,CAAxB,CAAT;AACD,GATD,CASE,OAAOC,KAAP,EAAc;AACd,UAAMZ,GAAG,CAACK,uBAAuB,CAACO,KAAD,CAAxB,CAAT;AACD,GAZsC,CAcvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACD,C,CAED;;AACA,OAAO,UAAUC,qBAAV,GAAkC;AACvC,QAAMf,UAAU,CAACG,uBAAD,EAA0BK,qBAA1B,CAAhB;AACD","sourcesContent":["// effects from sagas that let us do different things\n\n// listens to every action\nimport { takeLatest, call, put } from \"redux-saga/effects\";\n\nimport { FETCH_COLLECTIONS_START } from \"../types\";\nimport {\n  firestore,\n  convertCollectionsSnapshotToMap\n} from \"../../Firebase/Firebase.utils\";\nimport {\n  fetchCollectionsSuccess,\n  fetchCollectionsFailure\n} from \"../actions/shopActions\";\n\n// async code generator fuction\nexport function* fetchCollectionsAsync() {\n  try {\n    const collectionRef = firestore.collection(\"collections\");\n    // instead of promise chains, we use generator function\n    const snapshot = yield collectionRef.get();\n    const collectionsMap = yield call(\n      convertCollectionsSnapshotToMap,\n      snapshot\n    );\n    yield put(fetchCollectionsSuccess(collectionsMap));\n  } catch (error) {\n    yield put(fetchCollectionsFailure(error));\n  }\n\n  // async fetch\n  // collectionRef\n  //   .get()\n  //   .then(snapshot => {\n  //     const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n  //     // dispatch the succcess call\n  //     dispatch(fetchCollectionsSuccess(collectionsMap));\n  //   })\n  //   .catch(error => dispatch(fetchCollectionsFailure(error.message)));\n}\n\n// saga\nexport function* fetchCollectionsStart() {\n  yield takeLatest(FETCH_COLLECTIONS_START, fetchCollectionsAsync);\n}\n"]},"metadata":{},"sourceType":"module"}