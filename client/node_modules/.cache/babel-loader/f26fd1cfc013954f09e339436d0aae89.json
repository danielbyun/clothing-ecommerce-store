{"ast":null,"code":"var _jsxFileName = \"/Users/DanielByun/Documents/java/udemy/completeReactDeveloperCourse/clothing-ecommerce-store/src/Pages/Shop/Shop.js\";\nimport React, { useEffect, useState } from \"react\";\nimport { Route } from \"react-router-dom\";\nimport CollectionsOverview from \"../../Components/Collections-Overview/CollectionsOverview\";\nimport Collection from \"../Collection/Collection\";\nimport { firestore, convertCollectionsSnapshotToMap } from \"../../Firebase/Firebase.utils\";\nimport { connect } from \"react-redux\";\nimport { fetchCollectionsStartAsync } from \"../../redux/actions/shopActions\";\nimport WithSpinner from \"../../Components/WithSpinner/WithSpinner\";\nimport CollectionsOverviewContainer from \"../../Components/Collections-Overview/CollectionsOverviewContainer\";\nimport { createStructuredSelector } from \"reselect\";\nimport { selectIsCollectionFetching, selectIscollectionsLoaded } from \"../../redux/selectors/shopSelectors\";\nconst CollectionsOverviewWithSpinner = WithSpinner(CollectionsOverview);\nconst CollectionsPageWithSpinner = WithSpinner(Collection);\n\nconst Shop = props => {\n  const match = props.match,\n        isCollectionFetching = props.isCollectionFetching,\n        fetchCollectionsStartAsync = props.fetchCollectionsStartAsync,\n        isCollectionLoaded = props.isCollectionLoaded; // const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    // fetch from firestore\n    // const collectionRef = firestore.collection(\"collections\");\n    // =============== promise pattern ===============\n    // collectionRef.get().then(snapshot => {\n    //   const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n    //   updateCollections(collectionsMap);\n    //   // this will be refactored inside reducer\n    //   setLoading(false);\n    // });\n    // ==================================================\n    // =============== observable pattern ===============\n    // collectionRef.onSnapshot(async snapshot => {\n    //   const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n    //   updateCollections(collectionsMap);\n    //   // this will be refactored inside reducer\n    //   setLoading(false);\n    // });\n    // ==================================================\n    // =============== fetch pattern ====================\n    // REST API base URL\n    // https://firestore.googleapis.com/v1/projects/YOUR_PROJECT_ID/databases/(default)/documents\n    // database ID: ecommerce-store-db-7e46f\n    // fetch(\n    //   `https://firestore.googleapis.com/v1/projects/ecommerce-store-db-7e46f/databases/(default)/documents`\n    // )\n    //   .then(resp => resp.json())\n    //   .then(collections => console.log(collections));\n    fetchCollectionsStartAsync();\n  }, [fetchCollectionsStartAsync]);\n  return React.createElement(\"div\", {\n    className: \"shop-page\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }, React.createElement(Route, {\n    exact: true,\n    path: \"\".concat(match.path),\n    render: props => React.createElement(CollectionsOverviewWithSpinner, Object.assign({\n      isLoading: isCollectionFetching\n    }, props, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    })),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }), React.createElement(Route, {\n    path: \"\".concat(match.path, \"/:co llectionId\"),\n    render: props => React.createElement(CollectionsPageWithSpinner, Object.assign({\n      isLoading: !isCollectionLoaded\n    }, props, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    })),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }));\n};\n\nconst mapStateToProps = createStructuredSelector({\n  isCollectionFetching: selectIsCollectionFetching,\n  isCollectionLoaded: selectIscollectionsLoaded\n});\nexport default connect(mapStateToProps, {\n  fetchCollectionsStartAsync\n})(Shop);","map":{"version":3,"sources":["/Users/DanielByun/Documents/java/udemy/completeReactDeveloperCourse/clothing-ecommerce-store/src/Pages/Shop/Shop.js"],"names":["React","useEffect","useState","Route","CollectionsOverview","Collection","firestore","convertCollectionsSnapshotToMap","connect","fetchCollectionsStartAsync","WithSpinner","CollectionsOverviewContainer","createStructuredSelector","selectIsCollectionFetching","selectIscollectionsLoaded","CollectionsOverviewWithSpinner","CollectionsPageWithSpinner","Shop","props","match","isCollectionFetching","isCollectionLoaded","path","mapStateToProps"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,KAAT,QAAsB,kBAAtB;AAEA,OAAOC,mBAAP,MAAgC,2DAAhC;AACA,OAAOC,UAAP,MAAuB,0BAAvB;AACA,SACEC,SADF,EAEEC,+BAFF,QAGO,+BAHP;AAIA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,0BAAT,QAA2C,iCAA3C;AAEA,OAAOC,WAAP,MAAwB,0CAAxB;AACA,OAAOC,4BAAP,MAAyC,oEAAzC;AAEA,SAASC,wBAAT,QAAyC,UAAzC;AACA,SACEC,0BADF,EAEEC,yBAFF,QAGO,qCAHP;AAKA,MAAMC,8BAA8B,GAAGL,WAAW,CAACN,mBAAD,CAAlD;AACA,MAAMY,0BAA0B,GAAGN,WAAW,CAACL,UAAD,CAA9C;;AAEA,MAAMY,IAAI,GAAGC,KAAK,IAAI;AAAA,QAElBC,KAFkB,GAMhBD,KANgB,CAElBC,KAFkB;AAAA,QAGlBC,oBAHkB,GAMhBF,KANgB,CAGlBE,oBAHkB;AAAA,QAIlBX,0BAJkB,GAMhBS,KANgB,CAIlBT,0BAJkB;AAAA,QAKlBY,kBALkB,GAMhBH,KANgB,CAKlBG,kBALkB,EAOpB;;AAEApB,EAAAA,SAAS,CAAC,MAAM;AACd;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAQ,IAAAA,0BAA0B;AAC3B,GAhCQ,EAgCN,CAACA,0BAAD,CAhCM,CAAT;AAkCA,SACE;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEE,oBAAC,KAAD;AACE,IAAA,KAAK,MADP;AAEE,IAAA,IAAI,YAAKU,KAAK,CAACG,IAAX,CAFN;AAGE,IAAA,MAAM,EAAEJ,KAAK,IACX,oBAAC,8BAAD;AACE,MAAA,SAAS,EAAEE;AADb,OAEMF,KAFN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAJJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,EAYE,oBAAC,KAAD;AACE,IAAA,IAAI,YAAKC,KAAK,CAACG,IAAX,oBADN;AAEE,IAAA,MAAM,EAAEJ,KAAK,IACX,oBAAC,0BAAD;AACE,MAAA,SAAS,EAAE,CAACG;AADd,OAEMH,KAFN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAHJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAZF,CADF;AAwBD,CAnED;;AAqEA,MAAMK,eAAe,GAAGX,wBAAwB,CAAC;AAC/CQ,EAAAA,oBAAoB,EAAEP,0BADyB;AAE/CQ,EAAAA,kBAAkB,EAAEP;AAF2B,CAAD,CAAhD;AAKA,eAAeN,OAAO,CAACe,eAAD,EAAkB;AACtCd,EAAAA;AADsC,CAAlB,CAAP,CAEZQ,IAFY,CAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Route } from \"react-router-dom\";\n\nimport CollectionsOverview from \"../../Components/Collections-Overview/CollectionsOverview\";\nimport Collection from \"../Collection/Collection\";\nimport {\n  firestore,\n  convertCollectionsSnapshotToMap\n} from \"../../Firebase/Firebase.utils\";\nimport { connect } from \"react-redux\";\nimport { fetchCollectionsStartAsync } from \"../../redux/actions/shopActions\";\n\nimport WithSpinner from \"../../Components/WithSpinner/WithSpinner\";\nimport CollectionsOverviewContainer from \"../../Components/Collections-Overview/CollectionsOverviewContainer\";\n\nimport { createStructuredSelector } from \"reselect\";\nimport {\n  selectIsCollectionFetching,\n  selectIscollectionsLoaded\n} from \"../../redux/selectors/shopSelectors\";\n\nconst CollectionsOverviewWithSpinner = WithSpinner(CollectionsOverview);\nconst CollectionsPageWithSpinner = WithSpinner(Collection);\n\nconst Shop = props => {\n  const {\n    match,\n    isCollectionFetching,\n    fetchCollectionsStartAsync,\n    isCollectionLoaded\n  } = props;\n  // const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    // fetch from firestore\n    // const collectionRef = firestore.collection(\"collections\");\n\n    // =============== promise pattern ===============\n    // collectionRef.get().then(snapshot => {\n    //   const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n    //   updateCollections(collectionsMap);\n    //   // this will be refactored inside reducer\n    //   setLoading(false);\n    // });\n    // ==================================================\n\n    // =============== observable pattern ===============\n    // collectionRef.onSnapshot(async snapshot => {\n    //   const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n    //   updateCollections(collectionsMap);\n    //   // this will be refactored inside reducer\n    //   setLoading(false);\n    // });\n    // ==================================================\n\n    // =============== fetch pattern ====================\n    // REST API base URL\n    // https://firestore.googleapis.com/v1/projects/YOUR_PROJECT_ID/databases/(default)/documents\n    // database ID: ecommerce-store-db-7e46f\n    // fetch(\n    //   `https://firestore.googleapis.com/v1/projects/ecommerce-store-db-7e46f/databases/(default)/documents`\n    // )\n    //   .then(resp => resp.json())\n    //   .then(collections => console.log(collections));\n    fetchCollectionsStartAsync();\n  }, [fetchCollectionsStartAsync]);\n\n  return (\n    <div className=\"shop-page\">\n      {/* should dynamically redirect using a reducer */}\n      <Route\n        exact\n        path={`${match.path}`}\n        render={props => (\n          <CollectionsOverviewWithSpinner\n            isLoading={isCollectionFetching}\n            {...props}\n          />\n        )}\n      />\n      <Route\n        path={`${match.path}/:co llectionId`}\n        render={props => (\n          <CollectionsPageWithSpinner\n            isLoading={!isCollectionLoaded}\n            {...props}\n          />\n        )}\n      />\n    </div>\n  );\n};\n\nconst mapStateToProps = createStructuredSelector({\n  isCollectionFetching: selectIsCollectionFetching,\n  isCollectionLoaded: selectIscollectionsLoaded\n});\n\nexport default connect(mapStateToProps, {\n  fetchCollectionsStartAsync\n})(Shop);\n"]},"metadata":{},"sourceType":"module"}